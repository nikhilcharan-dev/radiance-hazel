/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/me.glb
*/

import React, {useEffect, useRef} from 'react'
import {useFrame, useGraph} from '@react-three/fiber'
import {useAnimations, useFBX, useGLTF} from '@react-three/drei'
import {SkeletonUtils} from 'three-stdlib'
import * as THREE from 'three'
import gsap from 'gsap'

const animationFBX = [
    "Falling", "Landing", "Bored", "BouncingFightIdle", "CrouchToStand",
    "Pointing", "QuickFormalBow",
    "Sitting",
    "Taunt",
    "Thankful",
    "Waving"
]

export default function Avatar({ position, avatarAnimations }) {
    const group = useRef(null);
    const { scene } = useGLTF('models/me.glb')
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes, materials } = useGraph(clone)

    const timeline = gsap.timeline()

    const convertToAnimations = React.useMemo( () => {
        return (animationName) => {
            const {animations} = useFBX(`animations/${animationName}.fbx`);
            animations[0].name = animationName;
            return animations[0];
        }
    }, []);

    const getAnimations = React.useMemo(() => {

        return () => {
            return animationFBX.map((animation) => {
                return convertToAnimations(animation)
            });
        }

    }, [convertToAnimations]);

    const animations = getAnimations();
    const {actions} = useAnimations(animations, group)

    useFrame((state, delta) => {
        if(avatarAnimations !== 0) group.current.getObjectByName('Head').lookAt(new THREE.Vector3(state.mouse.x * 5, state.mouse.y, 5));
    })

    useEffect(() => {

        if(avatarAnimations === 0) {
            actions['Falling'].reset().play();
        } else if(avatarAnimations === 1) {
            actions["Falling"].stop();
            timeline
                .to({}, {
                    duration: actions["Landing"].getClip().duration,
                    onStart: () => actions["Landing"].reset().play(),
                    onComplete: () => {
                        actions["Landing"].stop();
                        console.log("Landing Over")
                        actions["Waving"].play();
                    }
                })
        } else if(avatarAnimations === 2) {
            actions["Waving"].stop();
            actions["Sitting"].reset().fadeIn(0.5).play();
        }

    }, [avatarAnimations]);

    return (
        <group position={position} ref={group} dispose={null} scale={1}>

            <group>
                <primitive object={nodes.Hips} />
                <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
                <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
                <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
            </group>
        </group>
    )
}


useGLTF.preload('models/me.glb')
